// Code generated by protoc-gen-go.
// source: main.proto
// DO NOT EDIT!

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	main.proto

It has these top-level messages:
	User
	Story
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Site int32

const (
	Site_FFNET Site = 0
	Site_AO3   Site = 1
)

var Site_name = map[int32]string{
	0: "FFNET",
	1: "AO3",
}
var Site_value = map[string]int32{
	"FFNET": 0,
	"AO3":   1,
}

func (x Site) String() string {
	return proto.EnumName(Site_name, int32(x))
}
func (Site) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type User struct {
	Id         string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Exists     bool     `protobuf:"varint,2,opt,name=exists" json:"exists,omitempty"`
	Name       string   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Stories    []string `protobuf:"bytes,4,rep,name=stories" json:"stories,omitempty"`
	FavStories []string `protobuf:"bytes,5,rep,name=fav_stories,json=favStories" json:"fav_stories,omitempty"`
	FavAuthors []string `protobuf:"bytes,6,rep,name=fav_authors,json=favAuthors" json:"fav_authors,omitempty"`
	FavedBy    []string `protobuf:"bytes,7,rep,name=faved_by,json=favedBy" json:"faved_by,omitempty"`
	Site       Site     `protobuf:"varint,8,opt,name=site,enum=Site" json:"site,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Story struct {
	Id         int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title      string   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Category   string   `protobuf:"bytes,3,opt,name=category" json:"category,omitempty"`
	Image      string   `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
	Desc       string   `protobuf:"bytes,5,opt,name=desc" json:"desc,omitempty"`
	Url        string   `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	Dl         string   `protobuf:"bytes,7,opt,name=dl" json:"dl,omitempty"`
	WordCount  int32    `protobuf:"varint,8,opt,name=word_count,json=wordCount" json:"word_count,omitempty"`
	DateSubmit int32    `protobuf:"varint,9,opt,name=date_submit,json=dateSubmit" json:"date_submit,omitempty"`
	DateUpdate int32    `protobuf:"varint,10,opt,name=date_update,json=dateUpdate" json:"date_update,omitempty"`
	Reviews    int32    `protobuf:"varint,11,opt,name=reviews" json:"reviews,omitempty"`
	Chapters   int32    `protobuf:"varint,12,opt,name=chapters" json:"chapters,omitempty"`
	Complete   bool     `protobuf:"varint,13,opt,name=complete" json:"complete,omitempty"`
	FavedBy    []string `protobuf:"bytes,14,rep,name=faved_by,json=favedBy" json:"faved_by,omitempty"`
	Site       Site     `protobuf:"varint,15,opt,name=site,enum=Site" json:"site,omitempty"`
	Exists     bool     `protobuf:"varint,16,opt,name=exists" json:"exists,omitempty"`
}

func (m *Story) Reset()                    { *m = Story{} }
func (m *Story) String() string            { return proto.CompactTextString(m) }
func (*Story) ProtoMessage()               {}
func (*Story) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*Story)(nil), "Story")
	proto.RegisterEnum("Site", Site_name, Site_value)
}

var fileDescriptor0 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0xcd, 0x4e, 0xc2, 0x40,
	0x10, 0xb6, 0xb4, 0x85, 0x76, 0x50, 0x6c, 0x36, 0xc6, 0xac, 0x24, 0x46, 0xc2, 0xc9, 0x78, 0xe0,
	0x20, 0x4f, 0x80, 0x46, 0x8e, 0x9a, 0x14, 0x39, 0x37, 0x85, 0xae, 0xb0, 0x49, 0x4b, 0x9b, 0xee,
	0x16, 0xe4, 0x45, 0x7c, 0x32, 0x1f, 0xc8, 0xd9, 0x01, 0x2a, 0x44, 0x4f, 0x9d, 0xef, 0x67, 0xbb,
	0xfb, 0xcd, 0x0c, 0x40, 0x16, 0xcb, 0xd5, 0xa0, 0x28, 0x73, 0x9d, 0xf7, 0xbf, 0x2d, 0x70, 0xa6,
	0x4a, 0x94, 0xac, 0x03, 0x0d, 0x99, 0x70, 0xab, 0x67, 0xdd, 0xfb, 0x21, 0x56, 0xec, 0x1a, 0x9a,
	0xe2, 0x53, 0x2a, 0xad, 0x78, 0x03, 0x39, 0x2f, 0xdc, 0x23, 0xc6, 0xc0, 0x59, 0xc5, 0x99, 0xe0,
	0x36, 0x39, 0xa9, 0x66, 0x1c, 0x5a, 0x4a, 0xe7, 0xa5, 0x14, 0x8a, 0x3b, 0x3d, 0x1b, 0xe9, 0x03,
	0x64, 0x77, 0xd0, 0xfe, 0x88, 0xd7, 0xd1, 0x41, 0x75, 0x49, 0x05, 0xa4, 0x26, 0xa7, 0x86, 0xb8,
	0xd2, 0xcb, 0xbc, 0x54, 0xbc, 0x59, 0x1b, 0x46, 0x3b, 0x86, 0xdd, 0x80, 0x87, 0x48, 0x24, 0xd1,
	0x6c, 0xcb, 0x5b, 0xbb, 0x9f, 0x13, 0x7e, 0xda, 0xa2, 0xe4, 0x28, 0xa9, 0x05, 0xf7, 0xf0, 0x29,
	0x9d, 0x47, 0x77, 0x30, 0x41, 0x10, 0x12, 0xd5, 0xff, 0xb2, 0xc1, 0x35, 0x57, 0x6c, 0x8f, 0x72,
	0xb9, 0x94, 0xeb, 0x0a, 0x5c, 0x2d, 0x75, 0x2a, 0x28, 0x96, 0x1f, 0xee, 0x00, 0xeb, 0x82, 0x37,
	0x8f, 0xb5, 0x58, 0xe0, 0x89, 0x7d, 0xb2, 0x1a, 0x9b, 0x13, 0x32, 0x8b, 0x17, 0x02, 0xb3, 0xd1,
	0x09, 0x02, 0xa6, 0x0f, 0x89, 0x50, 0x73, 0x8c, 0x44, 0x7d, 0x30, 0x35, 0x0b, 0xc0, 0xae, 0xca,
	0x14, 0x43, 0x18, 0xca, 0x94, 0xe6, 0xf6, 0x24, 0xc5, 0x77, 0x53, 0x57, 0x93, 0x94, 0xdd, 0x02,
	0x6c, 0xf2, 0x32, 0x89, 0xe6, 0x79, 0xb5, 0xd2, 0xf4, 0x70, 0x37, 0xf4, 0x0d, 0xf3, 0x6c, 0x08,
	0xd3, 0x8d, 0x04, 0xaf, 0x8d, 0x54, 0x35, 0xcb, 0xa4, 0xe6, 0x3e, 0xe9, 0x60, 0xa8, 0x09, 0x31,
	0xb5, 0xa1, 0x2a, 0xcc, 0x87, 0xc3, 0xaf, 0x61, 0x4a, 0x8c, 0x19, 0x45, 0x29, 0xd6, 0x52, 0x6c,
	0x14, 0x6f, 0x93, 0x78, 0x80, 0x14, 0x71, 0x19, 0x17, 0x5a, 0x60, 0x9b, 0xcf, 0x49, 0xaa, 0x31,
	0x69, 0x79, 0x56, 0xa4, 0x02, 0xff, 0x79, 0x41, 0xe3, 0xae, 0xf1, 0xc9, 0x00, 0x3a, 0xff, 0x0f,
	0xe0, 0xf2, 0xcf, 0x00, 0x8e, 0xd6, 0x27, 0x38, 0x5e, 0x9f, 0x87, 0x2e, 0x38, 0xc6, 0xc5, 0x7c,
	0x70, 0xc7, 0xe3, 0xd7, 0x97, 0xf7, 0xe0, 0x8c, 0xb5, 0xc0, 0x1e, 0xbd, 0x0d, 0x03, 0x6b, 0xd6,
	0xa4, 0x95, 0x1c, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x97, 0x00, 0xb0, 0xa0, 0x02, 0x00,
	0x00,
}
