// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: main.proto

package main

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Site int32

const (
	FFNET        Site = 0
	AO3          Site = 1
	FICTIONPRESS Site = 2
)

var Site_name = map[int32]string{
	0: "FFNET",
	1: "AO3",
	2: "FICTIONPRESS",
}
var Site_value = map[string]int32{
	"FFNET":        0,
	"AO3":          1,
	"FICTIONPRESS": 2,
}

func (Site) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_main_902b1cd6a44eeb55, []int{0}
}

type User struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Exists               bool     `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Stories              []string `protobuf:"bytes,4,rep,name=stories" json:"stories,omitempty"`
	FavStories           []string `protobuf:"bytes,5,rep,name=fav_stories,json=favStories" json:"fav_stories,omitempty"`
	FavAuthors           []string `protobuf:"bytes,6,rep,name=fav_authors,json=favAuthors" json:"fav_authors,omitempty"`
	FavedBy              []string `protobuf:"bytes,7,rep,name=faved_by,json=favedBy" json:"faved_by,omitempty"`
	Site                 Site     `protobuf:"varint,8,opt,name=site,proto3,enum=Site" json:"site,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()      { *m = User{} }
func (*User) ProtoMessage() {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_main_902b1cd6a44eeb55, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetStories() []string {
	if m != nil {
		return m.Stories
	}
	return nil
}

func (m *User) GetFavStories() []string {
	if m != nil {
		return m.FavStories
	}
	return nil
}

func (m *User) GetFavAuthors() []string {
	if m != nil {
		return m.FavAuthors
	}
	return nil
}

func (m *User) GetFavedBy() []string {
	if m != nil {
		return m.FavedBy
	}
	return nil
}

func (m *User) GetSite() Site {
	if m != nil {
		return m.Site
	}
	return FFNET
}

type Story struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Category             string   `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Image                string   `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Desc                 string   `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	Url                  string   `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Dl                   string   `protobuf:"bytes,7,opt,name=dl,proto3" json:"dl,omitempty"`
	WordCount            int32    `protobuf:"varint,8,opt,name=word_count,json=wordCount,proto3" json:"word_count,omitempty"`
	DateSubmit           int32    `protobuf:"varint,9,opt,name=date_submit,json=dateSubmit,proto3" json:"date_submit,omitempty"`
	DateUpdate           int32    `protobuf:"varint,10,opt,name=date_update,json=dateUpdate,proto3" json:"date_update,omitempty"`
	Reviews              int32    `protobuf:"varint,11,opt,name=reviews,proto3" json:"reviews,omitempty"`
	Chapters             int32    `protobuf:"varint,12,opt,name=chapters,proto3" json:"chapters,omitempty"`
	Favorites            int32    `protobuf:"varint,17,opt,name=favorites,proto3" json:"favorites,omitempty"`
	Complete             bool     `protobuf:"varint,13,opt,name=complete,proto3" json:"complete,omitempty"`
	FavedBy              []string `protobuf:"bytes,14,rep,name=faved_by,json=favedBy" json:"faved_by,omitempty"`
	Site                 Site     `protobuf:"varint,15,opt,name=site,proto3,enum=Site" json:"site,omitempty"`
	Exists               bool     `protobuf:"varint,16,opt,name=exists,proto3" json:"exists,omitempty"`
	Score                float32  `protobuf:"fixed32,18,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Story) Reset()      { *m = Story{} }
func (*Story) ProtoMessage() {}
func (*Story) Descriptor() ([]byte, []int) {
	return fileDescriptor_main_902b1cd6a44eeb55, []int{1}
}
func (m *Story) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Story) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Story.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Story) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Story.Merge(dst, src)
}
func (m *Story) XXX_Size() int {
	return m.Size()
}
func (m *Story) XXX_DiscardUnknown() {
	xxx_messageInfo_Story.DiscardUnknown(m)
}

var xxx_messageInfo_Story proto.InternalMessageInfo

func (m *Story) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Story) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Story) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Story) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Story) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Story) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Story) GetDl() string {
	if m != nil {
		return m.Dl
	}
	return ""
}

func (m *Story) GetWordCount() int32 {
	if m != nil {
		return m.WordCount
	}
	return 0
}

func (m *Story) GetDateSubmit() int32 {
	if m != nil {
		return m.DateSubmit
	}
	return 0
}

func (m *Story) GetDateUpdate() int32 {
	if m != nil {
		return m.DateUpdate
	}
	return 0
}

func (m *Story) GetReviews() int32 {
	if m != nil {
		return m.Reviews
	}
	return 0
}

func (m *Story) GetChapters() int32 {
	if m != nil {
		return m.Chapters
	}
	return 0
}

func (m *Story) GetFavorites() int32 {
	if m != nil {
		return m.Favorites
	}
	return 0
}

func (m *Story) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

func (m *Story) GetFavedBy() []string {
	if m != nil {
		return m.FavedBy
	}
	return nil
}

func (m *Story) GetSite() Site {
	if m != nil {
		return m.Site
	}
	return FFNET
}

func (m *Story) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *Story) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func init() {
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*Story)(nil), "Story")
	proto.RegisterEnum("Site", Site_name, Site_value)
}
func (x Site) String() string {
	s, ok := Site_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Exists != that1.Exists {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Stories) != len(that1.Stories) {
		return false
	}
	for i := range this.Stories {
		if this.Stories[i] != that1.Stories[i] {
			return false
		}
	}
	if len(this.FavStories) != len(that1.FavStories) {
		return false
	}
	for i := range this.FavStories {
		if this.FavStories[i] != that1.FavStories[i] {
			return false
		}
	}
	if len(this.FavAuthors) != len(that1.FavAuthors) {
		return false
	}
	for i := range this.FavAuthors {
		if this.FavAuthors[i] != that1.FavAuthors[i] {
			return false
		}
	}
	if len(this.FavedBy) != len(that1.FavedBy) {
		return false
	}
	for i := range this.FavedBy {
		if this.FavedBy[i] != that1.FavedBy[i] {
			return false
		}
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *Story) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Story)
	if !ok {
		that2, ok := that.(Story)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Category != that1.Category {
		return false
	}
	if this.Image != that1.Image {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Dl != that1.Dl {
		return false
	}
	if this.WordCount != that1.WordCount {
		return false
	}
	if this.DateSubmit != that1.DateSubmit {
		return false
	}
	if this.DateUpdate != that1.DateUpdate {
		return false
	}
	if this.Reviews != that1.Reviews {
		return false
	}
	if this.Chapters != that1.Chapters {
		return false
	}
	if this.Favorites != that1.Favorites {
		return false
	}
	if this.Complete != that1.Complete {
		return false
	}
	if len(this.FavedBy) != len(that1.FavedBy) {
		return false
	}
	for i := range this.FavedBy {
		if this.FavedBy[i] != that1.FavedBy[i] {
			return false
		}
	}
	if this.Site != that1.Site {
		return false
	}
	if this.Exists != that1.Exists {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	return true
}
func (this *User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&main.User{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Exists: "+fmt.Sprintf("%#v", this.Exists)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Stories: "+fmt.Sprintf("%#v", this.Stories)+",\n")
	s = append(s, "FavStories: "+fmt.Sprintf("%#v", this.FavStories)+",\n")
	s = append(s, "FavAuthors: "+fmt.Sprintf("%#v", this.FavAuthors)+",\n")
	s = append(s, "FavedBy: "+fmt.Sprintf("%#v", this.FavedBy)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Story) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 22)
	s = append(s, "&main.Story{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	s = append(s, "Desc: "+fmt.Sprintf("%#v", this.Desc)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Dl: "+fmt.Sprintf("%#v", this.Dl)+",\n")
	s = append(s, "WordCount: "+fmt.Sprintf("%#v", this.WordCount)+",\n")
	s = append(s, "DateSubmit: "+fmt.Sprintf("%#v", this.DateSubmit)+",\n")
	s = append(s, "DateUpdate: "+fmt.Sprintf("%#v", this.DateUpdate)+",\n")
	s = append(s, "Reviews: "+fmt.Sprintf("%#v", this.Reviews)+",\n")
	s = append(s, "Chapters: "+fmt.Sprintf("%#v", this.Chapters)+",\n")
	s = append(s, "Favorites: "+fmt.Sprintf("%#v", this.Favorites)+",\n")
	s = append(s, "Complete: "+fmt.Sprintf("%#v", this.Complete)+",\n")
	s = append(s, "FavedBy: "+fmt.Sprintf("%#v", this.FavedBy)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "Exists: "+fmt.Sprintf("%#v", this.Exists)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMain(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Exists {
		dAtA[i] = 0x10
		i++
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Stories) > 0 {
		for _, s := range m.Stories {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.FavStories) > 0 {
		for _, s := range m.FavStories {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.FavAuthors) > 0 {
		for _, s := range m.FavAuthors {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.FavedBy) > 0 {
		for _, s := range m.FavedBy {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Site != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.Site))
	}
	return i, nil
}

func (m *Story) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Story) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.Id))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Category) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.Category)))
		i += copy(dAtA[i:], m.Category)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Dl) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.Dl)))
		i += copy(dAtA[i:], m.Dl)
	}
	if m.WordCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.WordCount))
	}
	if m.DateSubmit != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.DateSubmit))
	}
	if m.DateUpdate != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.DateUpdate))
	}
	if m.Reviews != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.Reviews))
	}
	if m.Chapters != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.Chapters))
	}
	if m.Complete {
		dAtA[i] = 0x68
		i++
		if m.Complete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.FavedBy) > 0 {
		for _, s := range m.FavedBy {
			dAtA[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Site != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.Site))
	}
	if m.Exists {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Favorites != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.Favorites))
	}
	if m.Score != 0 {
		dAtA[i] = 0x95
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Score))))
		i += 4
	}
	return i, nil
}

func encodeVarintMain(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *User) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	if m.Exists {
		n += 2
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	if len(m.Stories) > 0 {
		for _, s := range m.Stories {
			l = len(s)
			n += 1 + l + sovMain(uint64(l))
		}
	}
	if len(m.FavStories) > 0 {
		for _, s := range m.FavStories {
			l = len(s)
			n += 1 + l + sovMain(uint64(l))
		}
	}
	if len(m.FavAuthors) > 0 {
		for _, s := range m.FavAuthors {
			l = len(s)
			n += 1 + l + sovMain(uint64(l))
		}
	}
	if len(m.FavedBy) > 0 {
		for _, s := range m.FavedBy {
			l = len(s)
			n += 1 + l + sovMain(uint64(l))
		}
	}
	if m.Site != 0 {
		n += 1 + sovMain(uint64(m.Site))
	}
	return n
}

func (m *Story) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMain(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	l = len(m.Dl)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	if m.WordCount != 0 {
		n += 1 + sovMain(uint64(m.WordCount))
	}
	if m.DateSubmit != 0 {
		n += 1 + sovMain(uint64(m.DateSubmit))
	}
	if m.DateUpdate != 0 {
		n += 1 + sovMain(uint64(m.DateUpdate))
	}
	if m.Reviews != 0 {
		n += 1 + sovMain(uint64(m.Reviews))
	}
	if m.Chapters != 0 {
		n += 1 + sovMain(uint64(m.Chapters))
	}
	if m.Complete {
		n += 2
	}
	if len(m.FavedBy) > 0 {
		for _, s := range m.FavedBy {
			l = len(s)
			n += 1 + l + sovMain(uint64(l))
		}
	}
	if m.Site != 0 {
		n += 1 + sovMain(uint64(m.Site))
	}
	if m.Exists {
		n += 3
	}
	if m.Favorites != 0 {
		n += 2 + sovMain(uint64(m.Favorites))
	}
	if m.Score != 0 {
		n += 6
	}
	return n
}

func sovMain(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMain(x uint64) (n int) {
	return sovMain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *User) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&User{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Exists:` + fmt.Sprintf("%v", this.Exists) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Stories:` + fmt.Sprintf("%v", this.Stories) + `,`,
		`FavStories:` + fmt.Sprintf("%v", this.FavStories) + `,`,
		`FavAuthors:` + fmt.Sprintf("%v", this.FavAuthors) + `,`,
		`FavedBy:` + fmt.Sprintf("%v", this.FavedBy) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Story) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Story{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Category:` + fmt.Sprintf("%v", this.Category) + `,`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Dl:` + fmt.Sprintf("%v", this.Dl) + `,`,
		`WordCount:` + fmt.Sprintf("%v", this.WordCount) + `,`,
		`DateSubmit:` + fmt.Sprintf("%v", this.DateSubmit) + `,`,
		`DateUpdate:` + fmt.Sprintf("%v", this.DateUpdate) + `,`,
		`Reviews:` + fmt.Sprintf("%v", this.Reviews) + `,`,
		`Chapters:` + fmt.Sprintf("%v", this.Chapters) + `,`,
		`Complete:` + fmt.Sprintf("%v", this.Complete) + `,`,
		`FavedBy:` + fmt.Sprintf("%v", this.FavedBy) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`Exists:` + fmt.Sprintf("%v", this.Exists) + `,`,
		`Favorites:` + fmt.Sprintf("%v", this.Favorites) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMain(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stories", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stories = append(m.Stories, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavStories", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FavStories = append(m.FavStories, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavAuthors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FavAuthors = append(m.FavAuthors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FavedBy = append(m.FavedBy, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			m.Site = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Site |= (Site(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Story) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Story: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Story: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WordCount", wireType)
			}
			m.WordCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WordCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateSubmit", wireType)
			}
			m.DateSubmit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DateSubmit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateUpdate", wireType)
			}
			m.DateUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DateUpdate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reviews", wireType)
			}
			m.Reviews = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reviews |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chapters", wireType)
			}
			m.Chapters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chapters |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Complete = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FavedBy = append(m.FavedBy, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			m.Site = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Site |= (Site(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Favorites", wireType)
			}
			m.Favorites = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Favorites |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Score = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMain
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMain
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMain(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMain = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMain   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("main.proto", fileDescriptor_main_902b1cd6a44eeb55) }

var fileDescriptor_main_902b1cd6a44eeb55 = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xb1, 0x6e, 0xdb, 0x3a,
	0x14, 0x35, 0x6d, 0xc9, 0xb6, 0x6e, 0xf2, 0xfc, 0x54, 0xa2, 0x28, 0x98, 0xa2, 0x65, 0x85, 0x4c,
	0x42, 0x11, 0x64, 0x68, 0xbe, 0x20, 0x09, 0x62, 0x20, 0x4b, 0x52, 0x48, 0xc9, 0x6c, 0xd0, 0x16,
	0x9d, 0x10, 0x90, 0x4c, 0x83, 0xa4, 0x94, 0x7a, 0xeb, 0x27, 0xf4, 0x33, 0xfa, 0x29, 0x45, 0xa7,
	0x0c, 0x1d, 0x3a, 0xd6, 0xea, 0xd2, 0x31, 0x9f, 0x50, 0x90, 0x8a, 0xd5, 0x18, 0xed, 0xa4, 0x7b,
	0xce, 0xb9, 0x24, 0x75, 0xee, 0x21, 0x01, 0x0a, 0x26, 0x16, 0x87, 0x4b, 0x25, 0x8d, 0xdc, 0xff,
	0x86, 0xc0, 0xbb, 0xd6, 0x5c, 0xe1, 0x11, 0x74, 0x45, 0x46, 0x50, 0x84, 0xe2, 0x20, 0xe9, 0x8a,
	0x0c, 0xbf, 0x80, 0x3e, 0xff, 0x20, 0xb4, 0xd1, 0xa4, 0x1b, 0xa1, 0x78, 0x98, 0x3c, 0x22, 0x8c,
	0xc1, 0x5b, 0xb0, 0x82, 0x93, 0x9e, 0xeb, 0x74, 0x35, 0x26, 0x30, 0xd0, 0x46, 0x2a, 0xc1, 0x35,
	0xf1, 0xa2, 0x5e, 0x1c, 0x24, 0x1b, 0x88, 0xdf, 0xc0, 0xce, 0x9c, 0x55, 0x93, 0x8d, 0xea, 0x3b,
	0x15, 0xe6, 0xac, 0x4a, 0xb7, 0x1b, 0x58, 0x69, 0x6e, 0xa5, 0xd2, 0xa4, 0xdf, 0x36, 0x1c, 0x37,
	0x0c, 0xde, 0x83, 0xe1, 0x9c, 0x55, 0x3c, 0x9b, 0x4c, 0x57, 0x64, 0xd0, 0x6c, 0xee, 0xf0, 0xc9,
	0x0a, 0xef, 0x81, 0xa7, 0x85, 0xe1, 0x64, 0x18, 0xa1, 0x78, 0xf4, 0xce, 0x3f, 0x4c, 0x85, 0xe1,
	0x89, 0xa3, 0xf6, 0xbf, 0xf6, 0xc0, 0xb7, 0x47, 0xac, 0x9e, 0xf8, 0xf2, 0x9d, 0xaf, 0xe7, 0xe0,
	0x1b, 0x61, 0x72, 0xee, 0x6c, 0x05, 0x49, 0x03, 0xf0, 0x4b, 0x18, 0xce, 0x98, 0xe1, 0x37, 0x52,
	0xad, 0x1e, 0x9d, 0xb5, 0xd8, 0xae, 0x10, 0x05, 0xbb, 0xe1, 0xc4, 0x6b, 0x56, 0x38, 0x60, 0xe7,
	0x90, 0x71, 0x3d, 0x23, 0x7e, 0x33, 0x07, 0x5b, 0xe3, 0x10, 0x7a, 0xa5, 0xca, 0x49, 0xdf, 0x51,
	0xb6, 0xb4, 0xa7, 0x67, 0x39, 0x19, 0x34, 0x53, 0xcd, 0x72, 0xfc, 0x1a, 0xe0, 0x4e, 0xaa, 0x6c,
	0x32, 0x93, 0xe5, 0xc2, 0xb8, 0x1f, 0xf7, 0x93, 0xc0, 0x32, 0xa7, 0x96, 0xb0, 0xd3, 0xc8, 0x98,
	0xe1, 0x13, 0x5d, 0x4e, 0x0b, 0x61, 0x48, 0xe0, 0x74, 0xb0, 0x54, 0xea, 0x98, 0xb6, 0xa1, 0x5c,
	0xda, 0x0f, 0x81, 0x3f, 0x0d, 0xd7, 0x8e, 0xb1, 0x51, 0x28, 0x5e, 0x09, 0x7e, 0xa7, 0xc9, 0x8e,
	0x13, 0x37, 0xd0, 0x59, 0xbc, 0x65, 0x4b, 0xc3, 0x95, 0x26, 0xbb, 0x4e, 0x6a, 0xb1, 0xd3, 0x64,
	0xb1, 0xcc, 0xb9, 0xe1, 0xe4, 0x3f, 0x17, 0x77, 0x8b, 0xb7, 0x02, 0x18, 0xfd, 0x3b, 0x80, 0xff,
	0xff, 0x0a, 0xe0, 0xc9, 0xf5, 0x09, 0xb7, 0xae, 0xcf, 0x2b, 0x08, 0xe6, 0xac, 0x92, 0x4a, 0x18,
	0xae, 0xc9, 0xb3, 0xc6, 0x7f, 0x4b, 0xd8, 0x51, 0xeb, 0x99, 0x54, 0x9c, 0xe0, 0x08, 0xc5, 0xdd,
	0xa4, 0x01, 0x6f, 0x0f, 0xc0, 0xb3, 0x3b, 0xe3, 0x00, 0xfc, 0xf1, 0xf8, 0xe2, 0xec, 0x2a, 0xec,
	0xe0, 0x01, 0xf4, 0x8e, 0x2f, 0x8f, 0x42, 0x84, 0x43, 0xd8, 0x1d, 0x9f, 0x9f, 0x5e, 0x9d, 0x5f,
	0x5e, 0xbc, 0x4f, 0xce, 0xd2, 0x34, 0xec, 0x9e, 0x1c, 0xdc, 0xaf, 0x69, 0xe7, 0xfb, 0x9a, 0x76,
	0x1e, 0xd6, 0x14, 0x7d, 0xac, 0x29, 0xfa, 0x5c, 0x53, 0xf4, 0xa5, 0xa6, 0xe8, 0xbe, 0xa6, 0xe8,
	0x47, 0x4d, 0xd1, 0xaf, 0x9a, 0x76, 0x1e, 0x6a, 0x8a, 0x3e, 0xfd, 0xa4, 0x9d, 0x69, 0xdf, 0x3d,
	0x83, 0xa3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x21, 0xb7, 0xe5, 0xaf, 0x14, 0x03, 0x00, 0x00,
}
